// VulnerabilityAssessmentPage.jsx - Updated with backend integration
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import TargetSelectionCard from './TargetSelectionCard';
import NetworkScanningCard from './NetworkScanningCard';
import VulnerabilityAssessmentCard from './VulnerabilityAssessmentCard';
import { generateVulnerabilityReport } from './../../services/PdfReportGenerator';
import styles from './../css/VulnerabilityAssessment.module.css';

const VulnerabilityAssessment = () => {
    const navigate = useNavigate();
    const [currentStep, setCurrentStep] = useState(1);
    
    // Step 1 data - Target Selection & System Information
    const [targetIP, setTargetIP] = useState('');
    const [systemData, setSystemData] = useState(null);
    
    // Step 2 data - Network Scanning
    const [networkScanData, setNetworkScanData] = useState(null);
    
    // Step 3 data - Vulnerability Assessment
    const [vulnerabilityData, setVulnerabilityData] = useState(null);
    
    // Completion status tracking
    const [isStep1Complete, setIsStep1Complete] = useState(false);
    const [isStep2Complete, setIsStep2Complete] = useState(false);
    const [isStep3Complete, setIsStep3Complete] = useState(false);
    
    // Report generation state
    const [isGeneratingReport, setIsGeneratingReport] = useState(false);

    // Calculate progress percentage for the progress bar
    const getProgressPercentage = () => {
        let completedSteps = 0;
        if (isStep1Complete) completedSteps++;
        if (isStep2Complete) completedSteps++;
        if (isStep3Complete) completedSteps++;
        return (completedSteps / 3) * 100;
    };

    // Handle Step 1 completion - Target Selection with System Data
    const handleStep1Complete = (targetInfo) => {
        console.log('Raw targetInfo received:', targetInfo);
        
        // Ensure proper data structure
        let processedTargetInfo = {
            ip: '',
            systemData: null
        };

        // Handle different input formats
        if (typeof targetInfo === 'string') {
            // If just IP string is passed
            processedTargetInfo.ip = targetInfo;
        } else if (targetInfo && typeof targetInfo === 'object') {
            // If object is passed
            processedTargetInfo.ip = targetInfo.ip || targetInfo.targetIP || '';
            
            // Handle system data - could be nested in different ways
            if (targetInfo.systemData) {
                processedTargetInfo.systemData = targetInfo.systemData;
            } else if (targetInfo.systemInfo) {
                processedTargetInfo.systemData = targetInfo.systemInfo;
            } else {
                // Create system data from flat properties if available
                processedTargetInfo.systemData = {
                    os: { name: targetInfo.os || 'Unknown' },
                    hardware: {
                        manufacturer: targetInfo.manufacturer || 'Unknown',
                        model: targetInfo.model || 'Unknown',
                        total_physical_memory: targetInfo.totalMemory || targetInfo.memory || 'Unknown'
                    },
                    hostname: targetInfo.hostname || 'Unknown'
                };
            }
        }

        console.log('Processed targetInfo:', processedTargetInfo);
        
        setTargetIP(processedTargetInfo.ip);
        setSystemData(processedTargetInfo.systemData);
        setIsStep1Complete(true);
        setCurrentStep(2);
    };

    // Handle Step 2 completion - Network Scanning
    const handleStep2Complete = (scanData) => {
        setNetworkScanData(scanData);
        setIsStep2Complete(true);
        setCurrentStep(3);
        
        console.log('Step 2 Complete - Network Scan Data:', scanData);
    };

    // Handle Step 3 completion - Vulnerability Assessment
    const handleStep3Complete = (vulnData) => {
        setVulnerabilityData(vulnData);
        setIsStep3Complete(true);
        
        console.log('Step 3 Complete - Vulnerability Data:', vulnData);
    };

// Replace the logReportToBackend and handleGenerateReport functions in VulnerabilityAssessmentPage.jsx

// Send report data to backend for logging
const logReportToBackend = async (reportData) => {
    try {
        console.log('Sending report data to backend:', JSON.stringify(reportData, null, 2));
        
        const response = await fetch('/generate-comprehensive-report', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            credentials: 'include', // Include session cookies
            body: JSON.stringify(reportData)
        });

        const result = await response.json();
        console.log('Backend response:', result);
        
        if (result.success) {
            console.log('Report logged to backend successfully:', result);
            return result;
        } else {
            console.error('Failed to log report to backend:', result.message);
            return { success: false, message: result.message };
        }
    } catch (error) {
        console.error('Error logging report to backend:', error);
        return { success: false, message: 'Network error while logging report' };
    }
};

// Generate comprehensive vulnerability report
const handleGenerateReport = async () => {
    setIsGeneratingReport(true);
    
    try {
        // Create the complete report data with proper structure
        const completeReportData = {
            // Step 1 Data - Target Information
            target: {
                ip: targetIP,
                systemData: systemData
            },
            
            // Step 2 Data - Network Scanning
            networkScan: networkScanData,
            
            // Step 3 Data - Vulnerability Assessment
            vulnerabilityAssessment: vulnerabilityData,
            
            // Metadata
            reportGenerated: new Date().toISOString(),
            reportId: `VULN_${Date.now()}`,
            assessmentSteps: {
                targetSelection: isStep1Complete,
                networkScanning: isStep2Complete,
                vulnerabilityAssessment: isStep3Complete
            }
        };
        
        console.log('Final report data structure for PDF generation:', 
            JSON.stringify(completeReportData, null, 2));
        
        // First, log the report to backend database
        const backendResult = await logReportToBackend(completeReportData);
        
        // Generate PDF report (frontend) - only if backend logging succeeded
        const pdfResult = await generateVulnerabilityReport(completeReportData);
        
        if (pdfResult.success) {
            // Show success message with both PDF and database status
            let message = `‚úÖ ${pdfResult.message}\nFile: ${pdfResult.fileName}`;
            
            if (backendResult.success) {
                message += `\nüìä Report logged to database (ID: ${backendResult.reportId})`;
            } else {
                message += `\n‚ö†Ô∏è Warning: Report not saved to database - ${backendResult.message}`;
            }
            
            alert(message);
        } else {
            alert(`‚ùå ${pdfResult.message}\nError: ${pdfResult.error}`);
            console.error('PDF Generation Error:', pdfResult.error);
        }
        
    } catch (error) {
        console.error('Error during report generation:', error);
        alert('‚ùå Failed to generate report. Please try again.');
    } finally {
        setIsGeneratingReport(false);
    }
};

    return (
        <div style={{ 
            padding: '20px',
            minHeight: '100%',
            background: 'transparent',
            maxWidth: '1400px',
            margin: '0 auto',
            width: '100%',
            boxSizing: 'border-box'
        }}>
            {/* Page title */}
            <div style={{
                marginBottom: '40px',
                textAlign: 'center'
            }}>
                <h1 style={{
                    fontSize: '2.5rem',
                    fontWeight: '700',
                    color: '#2c3e50',
                    margin: '0',
                    textShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
                }}>
                    Vulnerability Assessment
                </h1>
            </div>

            {/* Fixed Progress Bar Container */}
            <div className={styles.progressBarContainer}>
                <div className={`${styles.progressBar} ${
                    isStep1Complete ? styles.step1Complete : ''
                } ${
                    isStep2Complete ? styles.step2Complete : ''
                }`}>
                    {/* Step 1 */}
                    <div className={styles.progressStep}>
                        <div className={`${styles.progressStepCircle} ${
                            isStep1Complete ? styles.completed : 
                            currentStep === 1 ? styles.active : styles.pending
                        }`}>
                            {isStep1Complete ? '‚úì' : '1'}
                        </div>
                        <span className={styles.progressStepLabel}>
                            Target Selection
                        </span>
                    </div>

                    {/* Step 2 */}
                    <div className={styles.progressStep}>
                        <div className={`${styles.progressStepCircle} ${
                            isStep2Complete ? styles.completed : 
                            currentStep === 2 ? styles.active : styles.pending
                        }`}>
                            {isStep2Complete ? '‚úì' : '2'}
                        </div>
                        <span className={styles.progressStepLabel}>
                            Network Scanning
                        </span>
                    </div>

                    {/* Step 3 */}
                    <div className={styles.progressStep}>
                        <div className={`${styles.progressStepCircle} ${
                            isStep3Complete ? styles.completed : 
                            currentStep === 3 ? styles.active : styles.pending
                        }`}>
                            {isStep3Complete ? '‚úì' : '3'}
                        </div>
                        <span className={styles.progressStepLabel}>
                            Vulnerability Assessment
                        </span>
                    </div>
                </div>
            </div>

            {/* Cards container */}
            <div style={{
                display: 'grid',
                gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
                gap: '25px',
                marginBottom: '40px',
                width: '100%'
            }}>
                <TargetSelectionCard
                    onComplete={handleStep1Complete}
                    isDisabled={false}
                />

                <NetworkScanningCard
                    onComplete={handleStep2Complete}
                    isDisabled={!isStep1Complete}
                    targetIP={targetIP}
                    systemData={systemData}
                />

                <VulnerabilityAssessmentCard
                    onComplete={handleStep3Complete}
                    isDisabled={!isStep2Complete}
                    targetIP={targetIP}
                    systemData={systemData}
                    networkScanData={networkScanData}
                />
            </div>

            {/* Generate Report Button */}
            <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                marginTop: '30px',
                padding: '20px 0'
            }}>
                <button
                    onClick={handleGenerateReport}
                    disabled={!isStep3Complete || isGeneratingReport}
                    style={{
                        padding: '12px 30px',
                        fontSize: '14px',
                        borderRadius: '8px',
                        border: 'none',
                        cursor: (isStep3Complete && !isGeneratingReport) ? 'pointer' : 'not-allowed',
                        fontWeight: '600',
                        textTransform: 'uppercase',
                        letterSpacing: '1px',
                        background: (isStep3Complete && !isGeneratingReport)
                            ? 'linear-gradient(135deg, #27ae60, #2ecc71)'
                            : 'linear-gradient(135deg, #bdc3c7, #95a5a6)',
                        color: (isStep3Complete && !isGeneratingReport) ? 'white' : '#7f8c8d',
                        boxShadow: (isStep3Complete && !isGeneratingReport)
                            ? '0 4px 15px rgba(46, 204, 113, 0.3)'
                            : '0 2px 10px rgba(189, 195, 199, 0.3)',
                        transition: 'all 0.3s ease',
                        minWidth: '220px',
                        opacity: (isStep3Complete && !isGeneratingReport) ? 1 : 0.7,
                        position: 'relative'
                    }}
                    onMouseEnter={(e) => {
                        if (isStep3Complete && !isGeneratingReport) {
                            e.target.style.boxShadow = '0 6px 20px rgba(46, 204, 113, 0.4)';
                            e.target.style.transform = 'translateY(-2px)';
                        }
                    }}
                    onMouseLeave={(e) => {
                        if (isStep3Complete && !isGeneratingReport) {
                            e.target.style.boxShadow = '0 4px 15px rgba(46, 204, 113, 0.3)';
                            e.target.style.transform = 'translateY(0)';
                        }
                    }}
                >
                    {isGeneratingReport ? (
                        <>
                            <span style={{
                                display: 'inline-block',
                                width: '16px',
                                height: '16px',
                                border: '2px solid transparent',
                                borderTop: '2px solid white',
                                borderRadius: '50%',
                                animation: 'spin 1s linear infinite',
                                marginRight: '8px'
                            }}></span>
                            Generating Report...
                        </>
                    ) : (
                        'Generate Vulnerability Report'
                    )}
                </button>
            </div>

            {/* Responsive styles */}
            <style jsx>{`
                @keyframes spin {
                    0% { transform: rotate(0deg); }
                    100% { transform: rotate(360deg); }
                }
                
                @media (max-width: 768px) {
                    div[style*="gridTemplateColumns"] {
                        grid-template-columns: 1fr !important;
                        gap: 20px !important;
                    }
                    
                    button {
                        width: 100% !important;
                        max-width: 300px !important;
                        min-width: auto !important;
                    }
                    
                    h1 {
                        font-size: 2rem !important;
                    }
                }
                
                @media (max-width: 480px) {
                    div[style*="padding: '20px'"] {
                        padding: 15px !important;
                    }
                    
                    h1 {
                        font-size: 1.8rem !important;
                    }
                    
                    button {
                        padding: 10px 20px !important;
                        font-size: 12px !important;
                    }
                }
            `}</style>
        </div>
    );
};

export default VulnerabilityAssessment;