// VulnerabilityAssessmentPage.jsx - Updated with Tailwind CSS
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import TargetSelectionCard from './TargetSelectionCard';
import NetworkScanningCard from './NetworkScanningCard';
import VulnerabilityAssessmentCard from './VulnerabilityAssessmentCard';
import { generateVulnerabilityReport } from './../../services/PdfReportGenerator';

const VulnerabilityAssessment = () => {
    const navigate = useNavigate();
    const [currentStep, setCurrentStep] = useState(1);
    
    // Step 1 data - Target Selection & System Information
    const [targetIP, setTargetIP] = useState('');
    const [systemData, setSystemData] = useState(null);
    
    // Step 2 data - Network Scanning
    const [networkScanData, setNetworkScanData] = useState(null);
    
    // Step 3 data - Vulnerability Assessment
    const [vulnerabilityData, setVulnerabilityData] = useState(null);
    
    // Completion status tracking
    const [isStep1Complete, setIsStep1Complete] = useState(false);
    const [isStep2Complete, setIsStep2Complete] = useState(false);
    const [isStep3Complete, setIsStep3Complete] = useState(false);
    
    // Report generation state
    const [isGeneratingReport, setIsGeneratingReport] = useState(false);

    // Handle Step 1 completion - Target Selection with System Data
    const handleStep1Complete = (targetInfo) => {
        console.log('Raw targetInfo received:', targetInfo);
        
        // Ensure proper data structure
        let processedTargetInfo = {
            ip: '',
            systemData: null
        };

        // Handle different input formats
        if (typeof targetInfo === 'string') {
            // If just IP string is passed
            processedTargetInfo.ip = targetInfo;
        } else if (targetInfo && typeof targetInfo === 'object') {
            // If object is passed
            processedTargetInfo.ip = targetInfo.ip || targetInfo.targetIP || '';
            
            // Handle system data - could be nested in different ways
            if (targetInfo.systemData) {
                processedTargetInfo.systemData = targetInfo.systemData;
            } else if (targetInfo.systemInfo) {
                processedTargetInfo.systemData = targetInfo.systemInfo;
            } else {
                // Create system data from flat properties if available
                processedTargetInfo.systemData = {
                    os: { name: targetInfo.os || 'Unknown' },
                    hardware: {
                        manufacturer: targetInfo.manufacturer || 'Unknown',
                        model: targetInfo.model || 'Unknown',
                        total_physical_memory: targetInfo.totalMemory || targetInfo.memory || 'Unknown'
                    },
                    hostname: targetInfo.hostname || 'Unknown'
                };
            }
        }

        console.log('Processed targetInfo:', processedTargetInfo);
        
        setTargetIP(processedTargetInfo.ip);
        setSystemData(processedTargetInfo.systemData);
        setIsStep1Complete(true);
        setCurrentStep(2);
    };

    // Handle Step 2 completion - Network Scanning
    const handleStep2Complete = (scanData) => {
        setNetworkScanData(scanData);
        setIsStep2Complete(true);
        setCurrentStep(3);
        
        console.log('Step 2 Complete - Network Scan Data:', scanData);
    };

    // Handle Step 3 completion - Vulnerability Assessment
    const handleStep3Complete = (vulnData) => {
        setVulnerabilityData(vulnData);
        setIsStep3Complete(true);
        
        console.log('Step 3 Complete - Vulnerability Data:', vulnData);
    };

    // Send report data to backend for logging
    const logReportToBackend = async (reportData) => {
        try {
            console.log('Sending report data to backend:', JSON.stringify(reportData, null, 2));
            
            const response = await fetch('/generate-comprehensive-report', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                credentials: 'include', // Include session cookies
                body: JSON.stringify(reportData)
            });

            const result = await response.json();
            console.log('Backend response:', result);
            
            if (result.success) {
                console.log('Report logged to backend successfully:', result);
                return result;
            } else {
                console.error('Failed to log report to backend:', result.message);
                return { success: false, message: result.message };
            }
        } catch (error) {
            console.error('Error logging report to backend:', error);
            return { success: false, message: 'Network error while logging report' };
        }
    };

    // Generate comprehensive vulnerability report
    const handleGenerateReport = async () => {
        setIsGeneratingReport(true);
        
        try {
            // Create the complete report data with proper structure
            const completeReportData = {
                // Step 1 Data - Target Information
                target: {
                    ip: targetIP,
                    systemData: systemData
                },
                
                // Step 2 Data - Network Scanning
                networkScan: networkScanData,
                
                // Step 3 Data - Vulnerability Assessment
                vulnerabilityAssessment: vulnerabilityData,
                
                // Metadata
                reportGenerated: new Date().toISOString(),
                reportId: `VULN_${Date.now()}`,
                assessmentSteps: {
                    targetSelection: isStep1Complete,
                    networkScanning: isStep2Complete,
                    vulnerabilityAssessment: isStep3Complete
                }
            };
            
            console.log('Final report data structure for PDF generation:', 
                JSON.stringify(completeReportData, null, 2));
            
            // First, log the report to backend database
            const backendResult = await logReportToBackend(completeReportData);
            
            // Generate PDF report (frontend) - only if backend logging succeeded
            const pdfResult = await generateVulnerabilityReport(completeReportData);
            
            if (pdfResult.success) {
                // Show success message with both PDF and database status
                let message = `‚úÖ ${pdfResult.message}\nFile: ${pdfResult.fileName}`;
                
                if (backendResult.success) {
                    message += `\nüìä Report logged to database (ID: ${backendResult.reportId})`;
                } else {
                    message += `\n‚ö†Ô∏è Warning: Report not saved to database - ${backendResult.message}`;
                }
                
                alert(message);
            } else {
                alert(`‚ùå ${pdfResult.message}\nError: ${pdfResult.error}`);
                console.error('PDF Generation Error:', pdfResult.error);
            }
            
        } catch (error) {
            console.error('Error during report generation:', error);
            alert('‚ùå Failed to generate report. Please try again.');
        } finally {
            setIsGeneratingReport(false);
        }
    };

    return (
        <div className="p-5 min-h-full bg-transparent max-w-7xl mx-auto w-full box-border">
            {/* Page title */}
            <div className="mb-10 text-center">
                <h1 className="text-4xl font-bold text-gray-800 m-0 drop-shadow-sm">
                    Vulnerability Assessment
                </h1>
            </div>

            <div className="flex justify-center items-center mb-10 p-5 rounded-2xl max-w-4xl mx-auto">
  <div className="flex items-center justify-between w-full relative">

    {/* Line between Step 1 and 2 */}
    <div className={`absolute top-6 left-[16.6%] w-[33.3%] h-1 z-0 transition-all duration-300 rounded-full ${
      isStep2Complete || isStep3Complete ? 'bg-green-500' :
      isStep1Complete ? 'bg-green-400' : 'bg-gray-300'
    }`} />

    {/* Line between Step 2 and 3 */}
    <div className={`absolute top-6 left-[50%] w-[33.3%] h-1 z-0 transition-all duration-300 rounded-full ${
      isStep3Complete ? 'bg-green-500' :
      isStep2Complete ? 'bg-green-400' : 'bg-gray-300'
    }`} />

    {/* Step 1 */}
    <div className="flex flex-col items-center relative z-10 flex-1">
      <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg mb-2 transition-all duration-300 ${
        isStep1Complete 
          ? 'bg-green-600 text-white shadow-md' 
          : currentStep === 1 
            ? 'bg-blue-600 text-white shadow-md' 
            : 'bg-gray-100 text-gray-400 border-2 border-gray-300'
      }`}>
        {isStep1Complete ? '‚úì' : '1'}
      </div>
      <span className="text-gray-800 text-xs font-semibold text-center max-w-44 leading-tight">
        Target Selection
      </span>
    </div>

    {/* Step 2 */}
    <div className="flex flex-col items-center relative z-10 flex-1">
      <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg mb-2 transition-all duration-300 ${
        isStep2Complete 
          ? 'bg-green-600 text-white shadow-md' 
          : currentStep === 2 
            ? 'bg-blue-600 text-white shadow-md' 
            : 'bg-gray-100 text-gray-400 border-2 border-gray-300'
      }`}>
        {isStep2Complete ? '‚úì' : '2'}
      </div>
      <span className="text-gray-800 text-xs font-semibold text-center max-w-44 leading-tight">
        Network Scanning
      </span>
    </div>

    {/* Step 3 */}
    <div className="flex flex-col items-center relative z-10 flex-1">
      <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg mb-2 transition-all duration-300 ${
        isStep3Complete 
          ? 'bg-green-600 text-white shadow-md' 
          : currentStep === 3 
            ? 'bg-blue-600 text-white shadow-md' 
            : 'bg-gray-100 text-gray-400 border-2 border-gray-300'
      }`}>
        {isStep3Complete ? '‚úì' : '3'}
      </div>
      <span className="text-gray-800 text-xs font-semibold text-center max-w-44 leading-tight">
        Vulnerability Assessment
      </span>
    </div>
  </div>
</div>


            {/* Cards container */}
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-10 w-full">
                <TargetSelectionCard
                    onComplete={handleStep1Complete}
                    isDisabled={false}
                />

                <NetworkScanningCard
                    onComplete={handleStep2Complete}
                    isDisabled={!isStep1Complete}
                    targetIP={targetIP}
                    systemData={systemData}
                />

                <VulnerabilityAssessmentCard
                    onComplete={handleStep3Complete}
                    isDisabled={!isStep2Complete}
                    targetIP={targetIP}
                    systemData={systemData}
                    networkScanData={networkScanData}
                />
            </div>

            {/* Generate Report Button */}
            <div className="flex justify-center items-center mt-8 py-5">
                <button
                    onClick={handleGenerateReport}
                    disabled={!isStep3Complete || isGeneratingReport}
                    className={`px-8 py-3 text-sm rounded-lg border-none font-semibold uppercase tracking-wide transition-all duration-300 min-w-56 relative ${
                        isStep3Complete && !isGeneratingReport
                            ? 'bg-gradient-to-r from-green-500 to-green-600 text-white shadow-lg shadow-green-500/30 cursor-pointer opacity-100 hover:shadow-xl hover:shadow-green-500/40 hover:-translate-y-0.5'
                            : 'bg-gradient-to-r from-gray-300 to-gray-400 text-gray-500 shadow-lg shadow-gray-300/30 cursor-not-allowed opacity-70'
                    }`}
                >
                    {isGeneratingReport ? (
                        <span className="flex items-center justify-center">
                            <span className="inline-block w-4 h-4 border-2 border-transparent border-t-white rounded-full animate-spin mr-2"></span>
                            Generating Report...
                        </span>
                    ) : (
                        'Generate Vulnerability Report'
                    )}
                </button>
            </div>

            {/* Responsive styles */}
            <style jsx>{`
                @media (max-width: 768px) {
                    .grid-cols-1.lg\\:grid-cols-3 {
                        grid-template-columns: 1fr !important;
                        gap: 1.25rem !important;
                    }
                }
                
                @media (max-width: 480px) {
                    .p-5 {
                        padding: 0.9375rem !important;
                    }
                    
                    .text-4xl {
                        font-size: 1.8rem !important;
                    }
                    
                    .px-8.py-3 {
                        padding: 0.625rem 1.25rem !important;
                        font-size: 0.75rem !important;
                    }
                }
            `}</style>
        </div>
    );
};

export default VulnerabilityAssessment;