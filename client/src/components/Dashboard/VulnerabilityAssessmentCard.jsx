import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const VulnerabilityAssessmentCard = ({
    onComplete,
    isDisabled,
    targetIP,
    systemData,
    networkScanData
}) => {
    const [isAssessing, setIsAssessing] = useState(false);
    const [isCardCompleted, setIsCardCompleted] = useState(false);
    const [assessmentProgress, setAssessmentProgress] = useState('');

    const performVulnerabilityAssessment = async () => {
        setIsAssessing(true);
        setAssessmentProgress('Initiating vulnerability scan...');

        try {
            if (!targetIP) throw new Error('Target IP is missing');
            if (!networkScanData) throw new Error('Network Scan Data is missing');

            const response = await fetch('/vulnerability-assessment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    ip_address: targetIP,
                    system_data: systemData,
                    network_scan_data: networkScanData
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Vulnerability assessment failed: ${errorText}`);
            }

            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `vulnerability_report_${targetIP.replace(/\./g, '_')}.json`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            const jsonText = await blob.text();
            let vulnerabilityData;

            try {
                vulnerabilityData = JSON.parse(jsonText);
            } catch (parseError) {
                console.warn('Could not parse vulnerability data:', parseError);
                vulnerabilityData = {
                    targetIP: targetIP,
                    timestamp: new Date().toISOString(),
                    error: 'Failed to parse vulnerability data',
                    rawData: jsonText
                };
            }

            const extractedVulnerabilityData = {
                targetIP: targetIP,
                timestamp: vulnerabilityData.scan_date || new Date().toISOString(),
                vulnerabilities: vulnerabilityData.vulnerabilities || [],
                riskLevel: determineRiskLevel(vulnerabilityData.summary || {}),
                summary: vulnerabilityData.summary || {},
                recommendations: vulnerabilityData.recommendations || [],
                scanDetails: {
                    format: 'json',
                    source: 'vulnerability-assessment-endpoint',
                    totalVulnerabilities: vulnerabilityData.total_vulnerabilities || 0
                },
                rawData: vulnerabilityData
            };

            setAssessmentProgress('Vulnerability assessment complete');
            setIsAssessing(false);
            setIsCardCompleted(true);

            onComplete(extractedVulnerabilityData);
        } catch (error) {
            console.error('Vulnerability Assessment Error:', error);
            setAssessmentProgress(`Assessment failed: ${error.message}`);
            setIsAssessing(false);
            onComplete({
                error: true,
                message: error.message,
                timestamp: new Date().toISOString(),
                targetIP: targetIP
            });
        }
    };

    const determineRiskLevel = (summary) => {
        if (summary.critical > 0) return 'Critical';
        if (summary.high > 0) return 'High';
        if (summary.medium > 0) return 'Medium';
        if (summary.low > 0) return 'Low';
        return 'None';
    };

    return (
        <div className={`
            relative overflow-hidden
            bg-white/95 backdrop-blur-xl
            rounded-2xl shadow-lg hover:shadow-xl
            transition-all duration-300 ease-out
            border border-white/20
            min-h-52 sm:min-h-60
            p-5 sm:p-6
            flex flex-col
            ${isDisabled ? 'opacity-60 cursor-not-allowed' : 'hover:-translate-y-1.5'}
            ${isDisabled ? 'bg-gray-100/70' : ''}
            border-l-4 border-l-fuchsia-500
        `}>
            <div className="absolute top-0 left-0 right-0 h-0.5 bg-gradient-to-r from-transparent via-white/40 to-transparent animate-pulse" />

            <h2 className="
                text-center text-lg sm:text-xl font-bold
                text-fuchsia-600 mb-5
                pb-3 border-b-2 border-fuchsia-500
                tracking-wide
            ">
                3. Vulnerability Assessment
            </h2>

            <div className="flex flex-col flex-grow text-center justify-between items-center gap-4">
                <p className="
                    text-gray-600 text-sm sm:text-base 
                    line-height-relaxed text-center
                    px-2
                ">
                    Conduct an in-depth vulnerability assessment to uncover security flaws and potential threats in the <b>{targetIP || 'target system'}.</b>
                        
                </p>

                <button
                    onClick={performVulnerabilityAssessment}
                    className={`
                        w-full py-2.5 sm:py-3 px-4 sm:px-6
                        mt-3 border-none rounded-lg
                        text-xs sm:text-sm font-bold
                        uppercase tracking-widest
                        transition-all duration-300
                        flex items-center justify-center
                        ${!isDisabled && !isAssessing && !isCardCompleted
                            ? 'bg-gradient-to-r from-blue-600 to-fuchsia-500 text-white shadow-lg hover:shadow-xl hover:-translate-y-0.5'
                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'
                        }
                        disabled:opacity-60
                    `}
                    disabled={isDisabled || isAssessing || isCardCompleted}
                >
                    {isCardCompleted
                        ? 'Completed'
                        : isAssessing
                            ? 'Assessing...'
                            : 'Start Vulnerability Assessment'}
                </button>
            </div>

            {isAssessing && (
                <div className="absolute inset-0 bg-white/98 backdrop-blur-md flex flex-col items-center justify-center rounded-2xl z-10 animate-fade-in">
                    <div className="relative w-16 h-16 mb-6">
                        <div className="absolute inset-0 rounded-full border-4 border-blue-200" />
                        <div className="absolute inset-0 rounded-full border-4 border-t-fuchsia-600 animate-spin" />
                    </div>
                    <h3 className="text-fuchsia-600 font-semibold text-base sm:text-lg mb-2">
                        Analyzing Vulnerabilities
                    </h3>
                    <p className="text-gray-600 text-xs sm:text-sm text-center px-4">
                        Identifying security weaknesses and risks...
                    </p>
                    {assessmentProgress && (
                        <p className="text-xs text-gray-500 text-center px-4 italic animate-pulse">
                            {assessmentProgress}
                        </p>
                    )}
                </div>
            )}

            {isCardCompleted && (
                <div className="
                    absolute inset-0 
                    bg-white/98 backdrop-blur-md
                    flex flex-col items-center justify-center
                    rounded-2xl z-10
                    animate-fade-in
                ">
                    <div className="
                        w-12 h-12 sm:w-14 sm:h-14
                        bg-gradient-to-r from-blue-600 to-fuchsia-500
                        rounded-full flex items-center justify-center
                        mb-4 text-white text-lg sm:text-xl font-bold
                        shadow-lg animate-pulse
                    ">
                        âœ“
                    </div>
                    <h3 className="
                        text-fuchsia-600 font-semibold
                        text-base sm:text-lg mb-2
                    ">
                        Assessment Complete
                    </h3>
                    <p className="
                        text-gray-600 text-xs sm:text-sm
                        text-center px-4
                    ">
                        Security vulnerabilities analyzed and reported
                    </p>
                </div>
            )}
        </div>
    );
};

export default VulnerabilityAssessmentCard;
