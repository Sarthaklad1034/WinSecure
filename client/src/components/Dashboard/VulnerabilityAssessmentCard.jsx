// import React, { useState } from 'react';
// import { useNavigate } from 'react-router-dom';
// import styles from './css/VulnerabilityAssessment.module.css';

// const VulnerabilityAssessmentCard = ({
//     onComplete,
//     isDisabled,
//     targetIP,
//     networkScanData
// }) => {
//     const [isAssessing, setIsAssessing] = useState(false);
//     const [isCardCompleted, setIsCardCompleted] = useState(false);
//     const [assessmentProgress, setAssessmentProgress] = useState('');

//     const performVulnerabilityAssessment = async () => {
//         setIsAssessing(true);
//         setAssessmentProgress('Initiating vulnerability scan...');

//         try {
//             if (!targetIP) throw new Error('Target IP is missing');
//             if (!networkScanData) throw new Error('Network Scan Data is missing');

//             const response = await fetch('/vulnerability-assessment', {
//                 method: 'POST',
//                 headers: {
//                     'Content-Type': 'application/json',
//                 },
//                 body: JSON.stringify({
//                     ip_address: targetIP,
//                     network_scan_data: networkScanData
//                 })
//             });

//             if (!response.ok) {
//                 const errorText = await response.text();
//                 throw new Error(`Vulnerability assessment failed: ${errorText}`);
//             }

//             const blob = await response.blob();
//             const url = window.URL.createObjectURL(blob);
//             const a = document.createElement('a');
//             a.style.display = 'none';
//             a.href = url;
//             a.download = `vulnerability_report_${targetIP.replace(/\./g, '_')}.txt`;
//             document.body.appendChild(a);
//             a.click();
//             window.URL.revokeObjectURL(url);

//             setAssessmentProgress('Vulnerability assessment complete');
//             setIsAssessing(false);
//             setIsCardCompleted(true);
//             onComplete();
//         } catch (error) {
//             console.error('Vulnerability Assessment Error:', error);
//             setAssessmentProgress(`Assessment failed: ${error.message}`);
//             setIsAssessing(false);
//         }
//     };

//     return (
//         <div className={`${styles.card} ${isDisabled ? styles.disabledCard : ''}`} style={{ position: 'relative', overflow: 'hidden', minHeight: '200px' }}>
//             <h2 className={styles.cardTitle}>3. Vulnerability Assessment</h2>
//             <div className={styles.cardContent}>
//                 <p>Analyze system vulnerabilities for {targetIP}</p>

//                 <button
//                     onClick={performVulnerabilityAssessment}
//                     className={styles.cardButton}
//                     disabled={isDisabled || isAssessing || isCardCompleted}
//                 >
//                     {isCardCompleted
//                         ? 'Completed'
//                         : isAssessing
//                         ? 'Assessing...'
//                         : 'Start Vulnerability Assessment'}
//                 </button>
//             </div>

//             {/* Processing overlay with purple theme - matching other cards dimensions */}
//             {isAssessing && (
//                 <div style={{
//                     position: 'absolute',
//                     top: 0,
//                     left: 0,
//                     right: 0,
//                     bottom: 0,
//                     background: 'white',
//                     display: 'flex',
//                     flexDirection: 'column',
//                     alignItems: 'center',
//                     justifyContent: 'center',
//                     borderRadius: 'inherit',
//                     zIndex: 10,
//                     minHeight: '200px'
//                 }}>
//                     <div style={{
//                         width: '60px',
//                         height: '60px',
//                         border: '4px solid #e8eaf6',
//                         borderTop: '4px solid #673AB7',
//                         borderRadius: '50%',
//                         animation: 'spin 1s linear infinite',
//                         margin: '0 auto 20px'
//                     }}></div>
//                     <h3 style={{
//                         margin: '0 0 10px 0',
//                         color: '#512DA8',
//                         fontSize: '18px',
//                         fontWeight: '600'
//                     }}>
//                         Analyzing Vulnerabilities
//                     </h3>
//                     <p style={{
//                         margin: 0,
//                         color: '#666',
//                         fontSize: '14px'
//                     }}>
//                         Identifying security weaknesses and risks...
//                     </p>
//                 </div>
//             )}

//             {/* Completion overlay with green theme - matching other cards dimensions */}
//             {isCardCompleted && (
//                 <div style={{
//                     position: 'absolute',
//                     top: 0,
//                     left: 0,
//                     right: 0,
//                     bottom: 0,
//                     background: 'white',
//                     display: 'flex',
//                     flexDirection: 'column',
//                     alignItems: 'center',
//                     justifyContent: 'center',
//                     borderRadius: 'inherit',
//                     zIndex: 10,
//                     minHeight: '200px'
//                 }}>
//                     <div style={{
//                         width: '60px',
//                         height: '60px',
//                         backgroundColor: '#4CAF50',
//                         borderRadius: '50%',
//                         display: 'flex',
//                         alignItems: 'center',
//                         justifyContent: 'center',
//                         margin: '0 auto 20px',
//                         color: 'white',
//                         fontSize: '24px',
//                         fontWeight: 'bold'
//                     }}>
//                         âœ“
//                     </div>
//                     <h3 style={{
//                         margin: '0 0 10px 0',
//                         color: '#2E7D32',
//                         fontSize: '18px',
//                         fontWeight: '600'
//                     }}>
//                         Assessment Complete
//                     </h3>
//                     <p style={{
//                         margin: 0,
//                         color: '#666',
//                         fontSize: '14px'
//                     }}>
//                         Security vulnerabilities analyzed and reported
//                     </p>
//                 </div>
//             )}

//             {/* CSS for spinner animation */}
//             <style jsx>{`
//                 @keyframes spin {
//                     0% { transform: rotate(0deg); }
//                     100% { transform: rotate(360deg); }
//                 }
//             `}</style>
//         </div>
//     );
// };

// export default VulnerabilityAssessmentCard;

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './../css/VulnerabilityAssessment.module.css';

const VulnerabilityAssessmentCard = ({
    onComplete,
    isDisabled,
    targetIP,
    systemData,
    networkScanData
}) => {
    const [isAssessing, setIsAssessing] = useState(false);
    const [isCardCompleted, setIsCardCompleted] = useState(false);
    const [assessmentProgress, setAssessmentProgress] = useState('');

    const performVulnerabilityAssessment = async () => {
        setIsAssessing(true);
        setAssessmentProgress('Initiating vulnerability scan...');

        try {
            if (!targetIP) throw new Error('Target IP is missing');
            if (!networkScanData) throw new Error('Network Scan Data is missing');

            const response = await fetch('/vulnerability-assessment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ip_address: targetIP,
                    system_data: systemData,
                    network_scan_data: networkScanData
                })
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`Vulnerability assessment failed: ${errorText}`);
            }

            // Handle JSON response
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `vulnerability_report_${targetIP.replace(/\./g, '_')}.json`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);

            // Parse the JSON data for processing
            const jsonText = await blob.text();
            let vulnerabilityData;
            
            try {
                vulnerabilityData = JSON.parse(jsonText);
            } catch (parseError) {
                console.warn('Could not parse vulnerability data:', parseError);
                vulnerabilityData = {
                    targetIP: targetIP,
                    timestamp: new Date().toISOString(),
                    error: 'Failed to parse vulnerability data',
                    rawData: jsonText
                };
            }

            // Structure the data for the parent component
            const extractedVulnerabilityData = {
                targetIP: targetIP,
                timestamp: vulnerabilityData.scan_date || new Date().toISOString(),
                vulnerabilities: vulnerabilityData.vulnerabilities || [],
                riskLevel: determineRiskLevel(vulnerabilityData.summary || {}),
                summary: vulnerabilityData.summary || {},
                recommendations: vulnerabilityData.recommendations || [],
                scanDetails: {
                    format: 'json',
                    source: 'vulnerability-assessment-endpoint',
                    totalVulnerabilities: vulnerabilityData.total_vulnerabilities || 0
                },
                rawData: vulnerabilityData
            };

            setAssessmentProgress('Vulnerability assessment complete');
            setIsAssessing(false);
            setIsCardCompleted(true);
            
            // Pass vulnerability data to parent component
            onComplete(extractedVulnerabilityData);
            
        } catch (error) {
            console.error('Vulnerability Assessment Error:', error);
            setAssessmentProgress(`Assessment failed: ${error.message}`);
            setIsAssessing(false);
            
            // Pass error information to parent component
            onComplete({
                error: true,
                message: error.message,
                timestamp: new Date().toISOString(),
                targetIP: targetIP
            });
        }
    };

    // Helper function to determine overall risk level based on vulnerability summary
    const determineRiskLevel = (summary) => {
        if (summary.critical > 0) return 'Critical';
        if (summary.high > 0) return 'High';
        if (summary.medium > 0) return 'Medium';
        if (summary.low > 0) return 'Low';
        return 'None';
    };

    return (
        <div className={`${styles.card} ${styles.vulnerabilityCard} ${isDisabled ? styles.disabledCard : ''}`}>
            <h2 className={styles.cardTitle}>3. Vulnerability Assessment</h2>
            <div className={styles.cardContent}>
                <p>Conduct an in-depth vulnerability assessment to uncover security flaws and potential threats in <b>{targetIP || 'target system'}</b>.</p>
{/* 
                {systemData && (
                    <p style={{ fontSize: '12px', color: '#666', marginTop: '5px' }}>
                        Using system data and network scan results
                    </p>
                )} */}

                <button
                    onClick={performVulnerabilityAssessment}
                    className={`${styles.cardButton} ${styles.vulnerabilityButton}`}
                    disabled={isDisabled || isAssessing || isCardCompleted}
                >
                    {isCardCompleted
                        ? 'Completed'
                        : isAssessing
                        ? 'Assessing...'
                        : 'Start Vulnerability Assessment'}
                </button>
            </div>

            {/* Processing overlay */}
            {isAssessing && (
                <div className={styles.vulnerabilityProcessingOverlay}>
                    <div className={styles.vulnerabilityProcessingSpinner}></div>
                    <h3 className={styles.vulnerabilityProcessingTitle}>
                        Analyzing Vulnerabilities
                    </h3>
                    <p className={styles.vulnerabilityProcessingText}>
                        Identifying security weaknesses and risks...
                    </p>
                    {assessmentProgress && (
                        <p style={{ 
                            fontSize: '12px', 
                            color: '#999', 
                            marginTop: '10px',
                            fontStyle: 'italic' 
                        }}>
                            {assessmentProgress}
                        </p>
                    )}
                </div>
            )}

            {/* Completion overlay */}
            {isCardCompleted && (
                <div className={styles.vulnerabilityCompletionOverlay}>
                    <div className={styles.vulnerabilityCompletionIcon}>
                        âœ“
                    </div>
                    <h3 className={styles.vulnerabilityCompletionTitle}>
                        Assessment Complete
                    </h3>
                    <p className={styles.vulnerabilityCompletionText}>
                        Security vulnerabilities analyzed and reported
                    </p>
                </div>
            )}
        </div>
    );
};

export default VulnerabilityAssessmentCard;